server.port=${PORT:8080}
springdoc.api-docs.path=/v3/api-docs
application.base-url=http://localhost:8080
spring.main.web-application-type=reactive
jwt.secret=mySecretKeyWhichShouldBeVeryLongAndRandom123!
jwt.expiration-in-ms=3600000
jwt.expiration=90
#######  
spring.r2dbc.pool.enabled=true
spring.r2dbc.pool.initial-size=10
spring.r2dbc.pool.max-size=20
spring.r2dbc.pool.max-idle-time=30m
##
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
####### you can have both spring.datasource.url and spring.r2dbc.url
#logging.level.io.r2dbc=DEBUG
#logging.level.org.springframework.r2dbc=DEBUG
#logging.level.org.springframework.data.r2dbc=DEBUG
#spring.sql.init.schema-locations=classpath:schema-h2.sql
#spring.datasource.url=jdbc:h2:file:./data/testdb;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.datasource.url=jdbc:h2:mem:///testdb;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.datasource.url=jdbc:h2:file:./data/testdb;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.datasource.username=sa
#spring.datasource.password=
#
#spring.sql.init.platform=h2
#spring.sql.init.mode=never
# \u2705 JDBC for H2 Console, Flyway and JDBC-based tools (JDBD only if needed)
# \u2705 SQL Initialization if needed
#DBeaver URL    =jdbc:h2:tcp://localhost:9092/~/testdb
#               =jdbc:h2:tcp://localhost:9092/mem/testdb
#   Method 1: Using schema-${platform}.sql (Recommended)
#           (1) Create your profile-specific schema files: schema-h2.sql
#           (2) Configure application.properties (or application.yml) with profiles: 
# spring.sql.init.platform is set, Spring Boot automatically looks for schema-${platform}.sql and 
#   data-${platform}.sql files in addition to the generic schema.sql and data.sql. This is the 
#   cleanest way to handle platform-specific DDL/DML.
# \u2705 JDBC repositories
#   spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE
#   spring.datasource.url=jdbc:h2:file:./data/testdb for file based
# \u2705 R2DBC for reactive repositories
#   r2dbc:h2:mem:///testdb        # In-memory
#   r2dbc:h2:file:///./data/testdb   # File-based
#   r2dbc:h2:tcp://localhost/testdb # TCP server
# \u2705 R2DBC for windows users
#spring.r2dbc.url=r2dbc:h2:file:///C:/path/to/data/testdb
#spring.r2dbc.url=r2dbc:h2:file:///C:\\path\\to\\data\\testdb
spring.r2dbc.initialize=false
spring.r2dbc.h2url=r2dbc:h2:mem:///C:/Users/javau/dev/data/testdb 
#;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.r2dbc.h2url=r2dbc:h2:file:./data/testdb;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.r2dbc.h2url=r2dbc:h2:mem:///testdb;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;CASE_INSENSITIVE_IDENTIFIERS=TRUE
spring.r2dbc.h2Username=sa
spring.r2dbc.h2Password=
spring.r2dbc.h2DdlSchemaDir=/ddl/h2/
# Additional H2 settings
spring.r2dbc.properties.DB_CLOSE_DELAY=-1
spring.r2dbc.properties.DATABASE_TO_UPPER=false
spring.r2dbc.properties.CASE_INSENSITIVE_IDENTIFIERS=TRUE
#spring.r2dbc.ddl-schema-dir=/ddl/h2
spring.r2dbc.h2Host=
spring.r2dbc.h2Port=
spring.r2dbc.h2Database=testdb
spring.r2dbc.h2TcpServerPort=9092
spring.r2dbc.h2WebServerPort=9093
####
spring.r2dbc.mockUrl=r2dbc:postgresql://localhost:5432/RPG_MOCK
spring.r2dbc.mockUsername=postgres
spring.r2dbc.mockPassword=admin
spring.r2dbc.mockDdlSchemaDir=/ddl/mock/
spring.r2dbc.mockHost=localhost
spring.r2dbc.mockPort=5432
spring.r2dbc.mockDatabase=RPG_MOCK
####
spring.r2dbc.pgUrl=r2dbc:postgresql://localhost:5432/RPG_DEV
spring.r2dbc.pgUsername=postgres
spring.r2dbc.pgPassword=admin
spring.r2dbc.pgDdlSchemaDir=/ddl/postgres/
spring.r2dbc.pgHost=localhost
spring.r2dbc.pgPort=5432
spring.r2dbc.pgDatabase=RPG_DEV
##########
spring.r2dbc.prodUrl=r2dbc:postgresql://localhost:5432/RPG_PROD
spring.r2dbc.prodUsername=postgres
spring.r2dbc.prodPassword=admin
spring.r2dbc.prodDdlSchemaDir=/ddl/production/
#spring.r2dbc.ddl-schema-dir=/ddl/production
spring.r2dbc.prodHost=localhost
spring.r2dbc.prodPort=5432
spring.r2dbc.prodDatabase=RPG_PROD
##########
spring.r2dbc.setupMockUserOnly=false
spring.r2dbc.truncateMockData=false
spring.r2dbc.skipDataInit=true
##########
