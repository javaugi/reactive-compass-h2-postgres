# src/main/resources/cosmos-queries.properties
cosmos.queries.premiumByPlanTypeTierAnalysis=
        SELECT p.planType,
        p.tierLevel,
        AVG(pp.basePremium * g.adjustmentFactor) AS avgAdjustedPremium,
        MIN(pp.basePremium * g.adjustmentFactor) AS minPremium,
        MAX(pp.basePremium * g.adjustmentFactor) AS maxPremium,
        COUNT(DISTINCT p.id) AS planCount
      FROM insurancePlans p
        JOIN planPricings pp ON p.id = pp.insurancePlanId
        JOIN geographicPricings g ON p.id = g.insurancePlanId
      WHERE pp.ageBracket = '40-49'
        AND g.ratingArea = 12
        AND p.active = TRUE
      GROUP BY p.planType, p.tierLevel
###       
cosmos.queries.costVsCoverageAnalysis=
    SELECT p.id,
      p.planName,
      c.deductibleIndividual,
      c.oopMaxIndividual,
      pp.basePremium,
      (pp.basePremium * 12 + c.deductibleIndividual) AS estimatedAnnualCost,
      ROUND(AVG(cl.allowedAmount) AS avgClaimCost,
      COUNT(cl.id) AS claimCount
      FROM insurancePlans p
      JOIN coverageDetails c ON p.id = c.insurancePlanId
      JOIN planPricings pp ON p.id = pp.insurancePlanId
      LEFT JOIN claimsData cl ON p.id = cl.insurancePlanId
      WHERE pp.ageBracket = '30-39'
      AND p.tierLevel = 'Silver'
      GROUP BY p.id, p.planName, c.deductibleIndividual, c.oopMaxIndividual, pp.basePremium
      ORDER BY estimatedAnnualCost
###       
cosmos.queries.tobaccoSurchargeImpactAnalysis=
    SELECT p.id,
           p.planName,
           ic.companyName,
           pp.ageBracket,
           pp.basePremium AS nonTobaccoPremium,
           (pp.basePremium + pp.tobaccoSurcharge) AS tobaccoPremium,
           ROUND((pp.tobaccoSurcharge / pp.basePremium) * 100, 2) AS surchargePercentage,
           COUNT(m.id) FILTER (WHERE m.tobaccoUser = TRUE) AS tobaccoUsers,
           COUNT(m.id) FILTER (WHERE m.tobaccoUser = FALSE) AS nonTobaccoUsers
       FROM insurancePlans p
        JOIN planPricings pp ON p.id = pp.insurancePlanId
        JOIN insuranceCompanies ic ON p.insuranceCompanyId = ic.id
        LEFT JOIN members m ON p.id = m.insurancePlanId
       GROUP BY p.id, p.planName, ic.companyName, pp.ageBracket, pp.basePremium, pp.tobaccoSurcharge
       ORDER BY surchargePercentage DESC
###       
cosmos.queries.marketBenchmarkingAnalysis=
    SELECT ic.companyName,
           p.tierLevel,
           p.planType,
           ROUND(AVG(pp.basePremium), 2) AS avgBasePremium,
           ROUND(AVG(pp.basePremium * g.adjustmentFactor), 2) AS avgAdjustedPremium,
           ic.marketShare
       FROM insurancePlans p
        JOIN insuranceCompanies ic ON p.insuranceCompanyId = ic.id
        JOIN planPricings pp ON p.id = pp.insurancePlanId
        JOIN geographicPricings g ON p.id = g.insurancePlanId
       WHERE pp.ageBracket = '40-49'
           AND g.ratingArea = 5
           AND p.active = TRUE
       GROUP BY ic.companyName, p.tierLevel, p.planType, ic.marketShare
       ORDER BY p.tierLevel, avgAdjustedPremium
###       
cosmos.queries.premiumVsAgeAnalysis=
    SELECT pp.ageBracket,
           ROUND(AVG(pp.basePremium), 2) AS avgPremium,
           ROUND(AVG(pp.basePremium) - LAG(ROUND(AVG(pp.basePremium), 2)) OVER (ORDER BY MIN(ageSortOrder)), 2) AS premiumIncrease,
           ROUND((AVG(pp.basePremium) - LAG(AVG(pp.basePremium)) OVER (ORDER BY MIN(ageSortOrder))) / 
               LAG(AVG(pp.basePremium)) OVER (ORDER BY MIN(ageSortOrder)) * 100, 2) AS percentIncrease
       FROM planPricings pp
       JOIN 
           (SELECT ageBracket, 
                  CASE 
                      WHEN ageBracket = '0-20' THEN 1
                      WHEN ageBracket = '21-29' THEN 2
                      WHEN ageBracket = '30-39' THEN 3
                      WHEN ageBracket = '40-49' THEN 4
                      WHEN ageBracket = '50-59' THEN 5
                      ELSE 6 
                  END AS ageSortOrder
           FROM planPricings
           GROUP BY ageBracket) ages ON pp.ageBracket = ages.ageBracket
       GROUP BY pp.ageBracket, ages.ageSortOrder
       ORDER BY ages.ageSortOrder
###       
cosmos.queries.riskPoolAnalysis=
    SELECT p.id,
            p.planName,
           COUNT(m.id) AS enrolledMembers,
           SUM(pp.basePremium * 12) AS annualPremiumVolume,
           SUM(cl.allowedAmount) AS annualClaimsCosts,
           (SUM(pp.basePremium * 12) - SUM(cl.allowedAmount)) AS underwritingResult,
           ROUND((SUM(cl.allowedAmount) / SUM(pp.basePremium * 12)) * 100, 2) AS lossRatio
       FROM insurancePlans p
        JOIN members m ON p.id = m.insurancePlanId
        JOIN planPricings pp ON p.id = pp.insurancePlanId AND 
            pp.ageBracket = CASE 
              WHEN EXTRACT(YEAR FROM AGE(m.birthDate)) BETWEEN 0 AND 20 THEN '0-20'
              WHEN EXTRACT(YEAR FROM AGE(m.birthDate)) BETWEEN 21 AND 29 THEN '21-29'
              WHEN EXTRACT(YEAR FROM AGE(m.birthDate)) BETWEEN 30 AND 39 THEN '30-39'
              WHEN EXTRACT(YEAR FROM AGE(m.birthDate)) BETWEEN 40 AND 49 THEN '40-49'
              ELSE '50+'
            END
        LEFT JOIN claimsData cl ON p.id = cl.insurancePlanId AND 
          cl.serviceDate BETWEEN '2023-01-01' AND '2023-12-31'
       WHERE p.active = TRUE
       GROUP BY p.id, p.planName
       ORDER BY lossRatio DESC
###       
cosmos.queries.networkAdequacyImpactAnalysis=
    SELECT p.planName,
           COUNT(DISTINCT pr.id) FILTER (WHERE pr.networkStatus = 'In-Network') AS inNetworkProviders,
           COUNT(DISTINCT cl.id) FILTER (WHERE pr.networkStatus = 'In-Network') AS inNetworkClaims,
           COUNT(DISTINCT cl.id) FILTER (WHERE pr.networkStatus = 'Out-of-Network') AS outOfNetworkClaims,
           ROUND(AVG(cl.allowedAmount) FILTER (WHERE pr.networkStatus = 'In-Network'), 2) AS avgInNetworkCost,
           ROUND(AVG(cl.allowedAmount) FILTER (WHERE pr.networkStatus = 'Out-of-Network'), 2) AS avgOutOfNetworkCost
       FROM insurancePlans p
       JOIN claimsData cl ON p.id = cl.insurancePlanId
       JOIN insuranceProviders pr ON cl.providerId = pr.id
       GROUP BY p.planName
       ORDER BY (avgOutOfNetworkCost - avgInNetworkCost) DESC
